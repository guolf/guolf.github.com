<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>52dev</title>
    <description>blog.52dev.net | guolf </description>
    <link>http://blog.52dev.net/</link>
    <atom:link href="http://blog.52dev.net/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 16 Dec 2016 12:14:15 +0800</pubDate>
    <lastBuildDate>Fri, 16 Dec 2016 12:14:15 +0800</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>genymotion unable create virtual device</title>
        <description>&lt;p&gt;genymotion有时因网络问题，无法下载，提示超时。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/A2BC68FB-9DBC-432D-9811-6348924744CE.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;解决方法：&lt;/p&gt;

&lt;p&gt;查看genymotion日志，找到下载URL，手动下载&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat ~/.Genymobile/genymotion.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/D5C7B50E-EBE3-4F1F-9EF2-1AAE9673EF65.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://dl.genymotion.com/dists/5.0.0/ova/genymotion_vbox86p_5.0_160825_104023.ova
&lt;/code&gt;即为需要下载的文件，将该文件下载后，拷贝至&lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/guolf/.Genymobile/Genymotion/ova/genymotion_vbox86p_5.0_160825_104023.ova&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv genymotion_vbox86p_5.0_160825_104023.ova /Users/guolf/.Genymobile/Genymotion/ova/genymotion_vbox86p_5.0_160825_104023.ova
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;重启genymotion,再次选择该模拟器，点击下载，几秒钟后就会显示下载完成，OK了。&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/12/15/Genymotion-unable-create-virtual-device/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/12/15/Genymotion-unable-create-virtual-device/</guid>
        
        <category>genymotion</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>oracle表空间占用情况查看</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;查询每个表空间大小&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
select b.file_id &quot;文件ID号&quot;,
       b.tablespace_name &quot;表空间名&quot;,
       b.bytes / 1024 / 1024 || &#39;M&#39; &quot;字节数&quot;,
       (b.bytes - sum(nvl(a.bytes, 0))) / 1024 / 1024 || &#39;M&#39; &quot;已使用&quot;,
       sum(nvl(a.bytes, 0)) / 1024 / 1024 || &#39;M&#39; &quot;剩余空间&quot;,
       100 - sum(nvl(a.bytes, 0)) / (b.bytes) * 100 &quot;占用百分比&quot;
  from dba_free_space a, dba_data_files b
 where a.file_id = b.file_id
 group by b.tablespace_name, b.file_id, b.bytes
 order by b.file_id;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;查询某个用户下所有表占用空间&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select OWNER,
        t.segment_name,
        t.segment_type,
        sum(t.bytes / 1024 / 1024) as &quot;size(M)&quot;
   from dba_segments t
  where t.owner = &#39;YPDZJG&#39;
    and t.segment_type = &#39;TABLE&#39;
  group by OWNER, t.segment_name, t.segment_type
  order by &quot;size(M)&quot; desc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 13 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/12/13/oracle-space-size/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/12/13/oracle-space-size/</guid>
        
        <category>Oracle</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>splinter安装与使用</title>
        <description>&lt;h2 id=&quot;splinter&quot;&gt;安装splinter&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip intall splinter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;chromedriver&quot;&gt;安装chromedriver&lt;/h2&gt;

&lt;p&gt;下载地址 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://chromedriver.storage.googleapis.com/index.html&lt;/code&gt;
根据本机安装的chrome版本选择相应的版本。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;----------ChromeDriver v2.26 (2016-12-09)----------
Supports Chrome v53-55
Resolved issue 1607: Chrome 57+ with perf logs enabled fails with &quot;unexpected command response&quot; [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1502: sendKeys(): SPACE key does not work on Chrome 53 [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 984: Extend ChromeDriver capabilities to cover network throttling feature from Chrome DevTools [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 877: UnhandledAlertException not being propagated upwards [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 1578: Flash plugin blocked after updating Chrome browser [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 1617: Fullscreen command is not recognised [[&#39;OS-All&#39;, &#39;Pri-3&#39;]]
Resolved issue 839: clear does not work on input type number with string value [[&#39;Pri-3&#39;]]
Resolved issue 1500: &quot;Could not handle JavaScript dialog&quot; error occurs randomly when accepting confirmation dialogs. [[]]
Resolved issue 1541: find element with empty tag is raising wrong exception in findElement [[]]
Resolved issue 1540: empty tagname value should raise an error when doing findElements [[]]

----------ChromeDriver v2.25 (2016-10-25)----------
Supports Chrome v53-55
Resolved issue 1547: Chromedriver crashes during event Runtime.consoleAPICalled [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1514: GetLog command times out if an alert is showing [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1460: &quot;Disable Developer Mode Extensions&quot; exists on Mac, but not Windows [[]]

----------ChromeDriver v2.24 (2016-09-09)----------
Supports Chrome v52-54
Resolved issue 1497: GetLog fails when the current window is closed [[&#39;OS-All&#39;, &#39;Pri-0&#39;]]
Resolved issue 1495: ChromeDriver crashes with &quot;Check failed: !page_load_strategy_.empty()&quot; [[&#39;OS-All&#39;, &#39;Pri-0&#39;]]
Resolved issue 1463: SessionNotCreatedException: Runtime.evaluate missing &#39;wasThrown&#39; on Chrome 54+ [[&#39;OS-All&#39;, &#39;Pri-0&#39;]]
Resolved issue 1484: SendKeys of a Tab Key has no effect in Chrome 53 [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1431: GetLog command does not work for Chrome 54+ [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1411: sendKeys generates events that are missing some fields [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1451: Chrome 54+ session not created exception: Runtime.executionContextCreated has invalid &#39;context&#39; [[&#39;Pri-1&#39;]]
Resolved issue 984: Extend ChromeDriver capabilities to cover network throttling feature from Chrome DevTools [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 1454: Net::ReadTimeout error on launching Canary v54 through RemoteWebDriver [[]]

----------ChromeDriver v2.23 (2016-08-04)----------
Supports Chrome v51-53
Resolved issue 1378: Android 6: Intitialization of Chrome driver fails when Chrome/Webview process is in running (R) state [[&#39;OS-Android&#39;, &#39;Pri-1&#39;]]
Resolved issue 1379: Chromedriver does not catch all available browser console log entries [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]

----------ChromeDriver v2.22 (2016-06-06)----------
Supports Chrome v49-52
Resolved issue 1348: Timeout error while navigating to URL on Chrome 51+ [[&#39;OS-All&#39;, &#39;Pri-0&#39;]]
Resolved issue 1381: Timeout error occurs when alert dialog is displayed on Chrome 52+ [[&#39;OS-All&#39;, &#39;Pri-1&#39;, &#39;merge-merged-2743&#39;]]
Resolved issue 1339: Failure when executing JS in a content script context [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1387: ChromeDriver hangs when calling driver.get() for same-process navigations [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1365: Touch emulation is not working under mobile emulation in Chrome 50+ [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1224: Chrome WebDriver throws an exception when trying to click a button inside a frame  [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 107: ChromeDriver Won&#39;t Switch To Frame inside nested frameset [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 1368: ExecuteScript returns &quot;Cannot read property &#39;document&#39; of null&quot; [[]]
Resolved issue 1355: Session not created exception when connecting to existing browser on localhost [[]]
Resolved issue 1331: &quot;chromeOptions.excludeSwitches&quot; is not working on Android [[]]

----------ChromeDriver v2.21 (2016-01-28)----------
Supports Chrome v46-50
Resolved issue 1276: empty FindElement response is returned while trying to find element with tagname object/embed [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1272: GET url returns &quot;data:text/html,chromewebdata&quot; [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 1310: ChromeDriver hangs (and times out) when inspecting inactive background pages [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 824: ChromeDriver creates two cookies when the cookie to add contains the domain [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 1274: ExecuteScript sends script to wrong execution context [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 1249: Change &quot;get current URL&quot; behavior in ChromeDriver [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 904: include Alert text in UnhandledAlertError stack trace [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 474: getAttribute() fails when attribute name has colon (:) character [[&#39;OS-All&#39;, &#39;Pri-3&#39;]]
Resolved issue 1245: Unable to switch to 1st opened window in session [[]]
Resolved issue 1290: Cannot access elements from subframes [[]]
Resolved issue 1261: getTitle() should return empty string instead of page url when page title is empty [[]]
Resolved issue 1238: testExecuteInRemovedFrame fails on waterfall bots [[&#39;OS-All&#39;]]
Resolved issue 1246: Chromedriver version number is not displayed in logs/ getCapabilities() [[&#39;OS-All&#39;]]

----------ChromeDriver v2.20 (2015-10-08)----------
Supports Chrome v43-48
Resolved issue 1225: RESPONSE InitSession unknown error: Device &amp;lt;device_id&amp;gt; is not online [[&#39;OS-Android&#39;, &#39;Pri-0&#39;]]
Resolved issue 960: ChromeDriver support to access WebView elements [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]
Resolved issue 1229: Spec violation: /sessions endpoint returns session ID at `sessionId` key instead of `id` key [[&#39;OS-All&#39;, &#39;Pri-2&#39;]]

----------ChromeDriver v2.19 (2015-08-28)----------
Supports Chrome v43-47
Resolved issue 1167: Various issues with ChromeDriver navigation tracker [[&#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 1205: Chrome crashes when enabling touch emulation [[&#39;OS-Mac&#39;, &#39;OS-Windows&#39;, &#39;Pri-1&#39;]]
Resolved issue 1142: cookies&#39; httponly attribute is not returned [[&#39;Pri-2&#39;]]

----------ChromeDriver v2.18 (2015-08-19)----------
Supports Chrome v43-46
Resolved issue 1158: Unable to find elements after installing Chrome 44 [[&#39;ChromeDriver-2.17&#39;, &#39;OS-All&#39;, &#39;Pri-1&#39;]]
Resolved issue 635: Implement touch actions for android chrome [[&#39;OS-Android&#39;, &#39;Pri-2&#39;]]
Resolved issue 1194: unknown error: cannot determine loading status from disconnected: received Inspector.detached event [[]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下载完成后后，将文件解压缩至/Users/name/Documents/WebDriver下，将该目录添加至环境变量中&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Open up Terminal.
Run sudo nano /etc/paths.
Enter your password.
Go to the bottom of the file and enter the path you wish to add.
My PATH looks like: /Users/name/Documents/WebDriver.
Control-x to quit.
Y to save.
Press enter to confirm.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;使用&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from splinter.browser import Browser

b = Browser(&#39;chrome&#39;)
b.visit(&quot;http://www.baidu.com&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;将使用chrome浏览器打开baidu.com网页。&lt;/p&gt;
</description>
        <pubDate>Mon, 12 Dec 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/12/12/mac-python-splinter/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/12/12/mac-python-splinter/</guid>
        
        <category>python</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>python3批量处理excel文件生成sql语句</title>
        <description>&lt;h2 id=&quot;xlrd&quot;&gt;安装xlrd&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip intall xlrd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;excel&quot;&gt;遍历获取Excel文件&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def get_all_excel(rootDir): 
	list_dirs = os.walk(rootDir) 
	for root, dirs, files in list_dirs: 
		for d in dirs: 
			get_all_excel(rootDir = os.path.join(root, d))
		for f in files:
			filename = os.path.join(root,f)
			if &#39;xls&#39; in filename:
				#excel_by_name(filename)
				print(os.path.join(root, f))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;excelsql&quot;&gt;读取excel生成SQL语句&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def excel_by_name(file,colnameindex=0,by_index=0):
    list =[]
    data = xlrd.open_workbook(file)
    table = data.sheets()[0]
    nrows = table.nrows #行数
    ncols = table.ncols #列数
    colnames =  table.row_values(colnameindex)
    sql = &quot;&quot;
    for rownum in range(1,nrows):
        row = table.row_values(rownum)
        if row:
            sInset = &quot;insert into temp (oname,oaddress,username,superclass,telnum,telname)&quot;
            sValues = &quot;values (&quot;
            for i in range(len(colnames)):
                if isinstance(row[i],int):
                    sValues += &quot;&#39;&quot; + str(row[i]) + &quot;&#39;,&quot;
                if isinstance(row[i],float):
                    sValues += &quot;&#39;&quot; + str(int(row[i])) + &quot;&#39;,&quot;
                else:
                    sValues += &quot;&#39;&quot; + row[i] + &quot;&#39;,&quot;
            sql += sInset[:-1]+&quot;)&quot; + sValues[:-1]+&quot;);&quot; + &quot;\r\n&quot;
	pos = file.rfind(&quot;.&quot;) #lastIndexof
    f1 = open(file[:pos] &#39;.sql&#39;,&#39;w&#39;)
    f1.write(sql)
    f1.close()

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;完整代码&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
import os,sys,xlrd

def get_all_excel(rootDir): 
	list_dirs = os.walk(rootDir) 
	for root, dirs, files in list_dirs: 
		for d in dirs: 
			get_all_excel(rootDir = os.path.join(root, d))
		for f in files:
			filename = os.path.join(root,f)
			if &#39;xls&#39; in filename:
				excel_by_name(filename)
				print(os.path.join(root, f))

def excel_by_name(file,colnameindex=0,by_index=0):
    list =[]
    data = xlrd.open_workbook(file)
    table = data.sheets()[0]
    nrows = table.nrows #行数
    ncols = table.ncols #列数
    colnames =  table.row_values(colnameindex)
    sql = &quot;&quot;
    for rownum in range(1,nrows):
        row = table.row_values(rownum)
        if row:
            sInset = &quot;insert into temp (oname,oaddress,username,superclass,telnum,telname)&quot;
            sValues = &quot;values (&quot;
            for i in range(len(colnames)):
                if isinstance(row[i],int):
                    sValues += &quot;&#39;&quot; + str(row[i]) + &quot;&#39;,&quot;
                if isinstance(row[i],float):
                    sValues += &quot;&#39;&quot; + str(int(row[i])) + &quot;&#39;,&quot;
                else:
                    sValues += &quot;&#39;&quot; + row[i] + &quot;&#39;,&quot;
            sql += sInset[:-1]+&quot;)&quot; + sValues[:-1]+&quot;);&quot; + &quot;\r\n&quot;
	pos = file.rfind(&quot;.&quot;) #lastIndexof
    f1 = open(file[:pos] &#39;.sql&#39;,&#39;w&#39;)
    f1.write(sql)
    f1.close()

def main():
	get_all_excel(rootDir=&quot;/Users/guolf/Documents/temp&quot;)

if __name__==&quot;__main__&quot;:
    main()

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 26 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/11/26/python-excel/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/11/26/python-excel/</guid>
        
        <category>python</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>SQLServer中实现Slope\Avedev</title>
        <description>&lt;h2 id=&quot;slope&quot;&gt;Slope&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE [test_slope](x FLOAT, y FLOAT)

DECLARE
@intCount INT
SET @intCount = 1
WHILE @intCount &amp;lt; 11
BEGIN
INSERT INTO [test_slope]
SELECT  @intCount, 5.12 * @intCount + 7 * rand()
SET @intCount = @intCount + 1
END

--– Get the Slope
SELECT (count(x)*sum(x*y) - sum(x)* sum(y))/(count(x)*sum(x*x) - sum(x)* sum(x)) FROM [test_slope]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;avedev&quot;&gt;Avedev&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE TABLE [test_avedev]([score] [float] NULL)

--insert data ..

begin
declare @v_avg float;
declare @v_count int;
select @v_avg = AVG(score),@v_count =COUNT(0) from test_avedev; 
-- Get the Avedev
select SUM(ABS(score-@v_avg))/@v_count from test_avedev;
end;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 25 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/11/25/sqlserver-note/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/11/25/sqlserver-note/</guid>
        
        <category>SQLServer</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Oracle正则表达式</title>
        <description>&lt;h2 id=&quot;oracle&quot;&gt;Oracle正则表达式&lt;/h2&gt;

&lt;p&gt;正则查询患者妊娠、怀孕时间&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select regexp_substr(&#39;妊娠10周&#39; ,&#39;(孕|妊娠)([^&quot;]*)周&#39;,1, 1) from dual;  
select regexp_substr(&#39;孕10周&#39; ,&#39;(孕|妊娠)([^&quot;]*)周&#39;,1, 1) from dual;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;正则替换患者姓名&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select regexp_replace(&#39;出院记录[王老五]&#39; ,&#39;\[[^&quot;]*(])&#39;,&#39;[某患者]&#39;,1, 0) from dual;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 23 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/11/23/oracle-regexp/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/11/23/oracle-regexp/</guid>
        
        <category>Oracle</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>mac与windows互相访问共享文件</title>
        <description>&lt;h2 id=&quot;windowsmac&quot;&gt;Windows访问Mac共享文件夹&lt;/h2&gt;

&lt;p&gt;1、进入系统偏好-共享，开启文件共享&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2656595B-4AD4-46E2-A335-B79A8CD98BA6.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2、确保windows、mac在同一网段下，互相能够ping通&lt;/p&gt;

&lt;p&gt;windows下&lt;code class=&quot;highlighter-rouge&quot;&gt;win+R&lt;/code&gt;，打开运行界面，输入&lt;code class=&quot;highlighter-rouge&quot;&gt;\\192.168.23.2&lt;/code&gt;或者输入电脑名称&lt;code class=&quot;highlighter-rouge&quot;&gt;\\guolf&lt;/code&gt;。输入用户名、密码，即可进行访问。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/win+R.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;macwindows&quot;&gt;mac访问windows共享文件夹&lt;/h2&gt;

&lt;p&gt;1、选中需共享文件夹，右键&lt;code class=&quot;highlighter-rouge&quot;&gt;属性&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;共享&lt;/code&gt;，开启共享。&lt;/p&gt;

&lt;p&gt;2、确保windows、mac在同一网段下，互相能够ping通。mac进入Finder界面，&lt;code class=&quot;highlighter-rouge&quot;&gt;前往&lt;/code&gt;-&lt;code class=&quot;highlighter-rouge&quot;&gt;连接服务器&lt;/code&gt;，输入&lt;code class=&quot;highlighter-rouge&quot;&gt;smb://ip&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;smb://hostname&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/D51DBB8E-2EC8-439E-B06A-6B0F78BAFEBD.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3、输入windows用户名密码,即可进行访问。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/D26076C4-F252-49A7-ABB9-AD28F4ACDECE.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/04/12/mac%E4%B8%8Ewindows%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/04/12/mac%E4%B8%8Ewindows%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6/</guid>
        
        <category>mac</category>
        
        <category>windows</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>安卓优秀开源类库收集整理</title>
        <description>&lt;p&gt;安卓优秀开源类库收集整理，方便快速查看gradle引用地址及最新版本.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;json&quot;&gt;json&lt;/h1&gt;

&lt;h2 id=&quot;gson&quot;&gt;gson&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/google/gson&quot;&gt;项目地址:http://github.com/google/gson&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/google/gson&quot;&gt;&lt;img src=&quot;https://travis-ci.org/google/gson.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.google.code.gson/gson/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://www.javadoc.io/doc/com.google.code.gson/gson&quot;&gt;&lt;img src=&quot;https://javadoc-emblem.rhcloud.com/doc/com.google.code.gson/gson/badge.svg&quot; alt=&quot;Javadoc&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.google.code.gson:gson:2.6.2&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;fastjson&quot;&gt;fastjson&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alibaba/fastjson&quot;&gt;项目地址:https://github.com/alibaba/fastjson&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.alibaba/fastjson/&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.alibaba/fastjson/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/alibaba/fastjson/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/alibaba/fastjson.svg&quot; alt=&quot;GitHub release&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg&quot; alt=&quot;License&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.alibaba:fastjson:1.2.8&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section&quot;&gt;图片加载&lt;/h1&gt;

&lt;h2 id=&quot;picasso&quot;&gt;picasso&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/square/picasso&quot;&gt;项目地址:https://github.com/square/picasso&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.squareup.picasso/picasso/&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.squareup.picasso/picasso/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.squareup.picasso:picasso:2.5.2&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;fresco&quot;&gt;fresco&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/facebook/fresco&quot;&gt;项目地址:https://github.com/facebook/fresco&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.facebook.fresco/fresco/&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.facebook.fresco/fresco/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.facebook.fresco:fresco:0.9.0&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;glide&quot;&gt;glide&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;项目地址:https://github.com/bumptech/glide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.github.bumptech.glide/glide/&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.github.bumptech.glide/glide/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.github.bumptech.glide:glide:3.7.0&#39;
compile &#39;com.android.support:support-v4:19.1.0&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;混淆&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-keep public class * implements com.bumptech.glide.module.GlideModule
-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
  **[] $VALUES;
  public *;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;android-universal-image-loader&quot;&gt;Android-Universal-Image-Loader&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot;&gt;项目地址:https://github.com/nostra13/Android-Universal-Image-Loader&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.nostra13.universalimageloader/universal-image-loader/&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.nostra13.universalimageloader/universal-image-loader/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.nostra13.universalimageloader:universal-image-loader:1.9.5&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;http&quot;&gt;http&lt;/h1&gt;

&lt;h2 id=&quot;okhttp&quot;&gt;okhttp&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/square/okhttp&quot;&gt;项目地址:https://github.com/square/okhttp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.squareup.okhttp3/okhttp/&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.squareup.okhttp3/okhttp/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.squareup.okhttp3:okhttp:3.2.0&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;retrofit&quot;&gt;retrofit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/square/retrofit&quot;&gt;项目地址:https://github.com/square/retrofit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.squareup.retrofit2/retrofit/&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.squareup.retrofit2/retrofit/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.squareup.retrofit2:retrofit:2.0.1&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;android-async-http&quot;&gt;android-async-http&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/loopj/android-async-http&quot;&gt;项目地址:https://github.com/loopj/android-async-http&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://maven-badges.herokuapp.com/maven-central/com.loopj.android/android-async-http/&quot;&gt;&lt;img src=&quot;https://maven-badges.herokuapp.com/maven-central/com.loopj.android/android-async-http/badge.svg&quot; alt=&quot;Maven Central&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;compile &#39;com.loopj.android:android-async-http:1.4.9&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;chat&quot;&gt;chat&lt;/h1&gt;

&lt;h2 id=&quot;mpandroidchart&quot;&gt;MPAndroidChart&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart&quot;&gt;项目地址:https://github.com/PhilJay/MPAndroidChart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/PhilJay/MPAndroidChart/releases&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/PhilJay/MPAndroidChart.svg&quot; alt=&quot;GitHub release&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;repositories {
    maven { url &quot;https://jitpack.io&quot; }
}

dependencies {
    compile &#39;com.github.PhilJay:MPAndroidChart:v2.2.4&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/04/01/Android%E7%B1%BB%E5%BA%93%E6%94%B6%E9%9B%86/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/04/01/Android%E7%B1%BB%E5%BA%93%E6%94%B6%E9%9B%86/</guid>
        
        <category>android</category>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Android应用安全开发之源码安全</title>
        <description>
&lt;p&gt;本文转载自&lt;a href=&quot;http://drops.wooyun.org/mobile/12469&quot;&gt;乌云知识库-移动安全&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;简介&lt;/h1&gt;
&lt;p&gt;Android apk很容易通过逆向工程进行反编译，从而是其代码完全暴露给攻击者，使apk面临破解，软件逻辑修改，插入恶意代码，替换广告商ID等风险。我们可以采用以下方法对apk进行保护.&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;混淆保护&lt;/h1&gt;

&lt;p&gt;混淆是一种用来隐藏程序意图的技术，可以增加代码阅读的难度，使攻击者难以全面掌控app内部实现逻辑，从而增加逆向工程和破解的难度，防止知识产权被窃取。&lt;/p&gt;

&lt;p&gt;代码混淆技术主要做了如下的工作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过对代码类名，函数名做替换来实现代码混淆保护&lt;/li&gt;
  &lt;li&gt;简单的逻辑分支混淆&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;已经有很多第三方的软件可以用来混淆我们的Android应用，常见的有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Proguard&lt;/li&gt;
  &lt;li&gt;DashO&lt;/li&gt;
  &lt;li&gt;Dexguard&lt;/li&gt;
  &lt;li&gt;DexProtector&lt;/li&gt;
  &lt;li&gt;ApkProtect&lt;/li&gt;
  &lt;li&gt;Shield4j&lt;/li&gt;
  &lt;li&gt;Stringer&lt;/li&gt;
  &lt;li&gt;Allitori&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些混淆器在代码中起作用的层次是不一样的。Android编译的大致流程如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Java Code(.java) -&amp;gt; Java Bytecode(.class) -&amp;gt; Dalvik 
Bytecode(classes.dex)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;有的混淆器是在编译之前直接作用于java源代码，有的作用于java字节码，有的作用于Dalvik字节码。但基本都是针对java层作混淆。&lt;/p&gt;

&lt;p&gt;相对于Dalvik虚拟机层次的混淆而言，原生语言（C/C++）的代码混淆选择并不多，Obfuscator-LLVM工程是一个值得关注的例外。&lt;/p&gt;

&lt;p&gt;代码混淆的优点是使代码可阅读性变差，要全面掌控代码逻辑难度变大；可以压缩代码，使得代码大小变小。但也存在如下缺点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;无法真正保护代码不被反编译；&lt;/li&gt;
  &lt;li&gt;在应对动态调试逆向分析上无效；&lt;/li&gt;
  &lt;li&gt;通过验证本地签名的机制很容易被绕过。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;也就是说，代码混淆并不能有效的保护应用自身。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/0c23e0a886f4&quot;&gt;http://www.jianshu.com/p/0c23e0a886f4&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;二次打包防护&lt;/h1&gt;

&lt;h2 id=&quot;apk&quot;&gt;Apk签名校验&lt;/h2&gt;

&lt;p&gt;每一个软件在发布时都需要开发人员对其进行签名，而签名使用的密钥文件时开发人员所独有的，破解者通常不可能拥有相同的密钥文件，因此可以使用签名校验的方法保护apk。Android SDK中PackageManager类的getPackageInfo()方法就可以进行软件签名检测。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class getSign {
    public static int getSignature(PackageManager pm , String packageName){
    PackageInfo pi = null;
    int sig = 0;
    Signature[]s = null;
    try{
        pi = pm.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
        s = pi.signatures;
        sig = s[0].hashCode();//s[0]是签名证书的公钥，此处获取hashcode方便对比
    }catch(Exception e){
        handleException();
    }
    return sig;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;主程序代码参考：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pm = this.getPackageManager();
int s = getSign.getSignature(pm, &quot;com.hik.getsinature&quot;);
if(s != ORIGNAL_SGIN_HASHCODE){//对比当前和预埋签名的hashcode是否一致
    System.exit(1);//不一致则强制程序退出
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dex&quot;&gt;Dex文件校验&lt;/h2&gt;

&lt;p&gt;重编译apk其实就是重编译了classes.dex文件，重编译后，生成的classes.dex文件的hash值就改变了，因此我们可以通过检测安装后classes.dex文件的hash值来判断apk是否被重打包过。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;读取应用安装目录下/data/app/xxx.apk中的classes.dex文件并计算其哈希值，将该值与软件发布时的classes.dex哈希值做比较来判断客户端是否被篡改。&lt;/li&gt;
  &lt;li&gt;读取应用安装目录下/data/app/xxx.apk中的META-INF目录下的MANIFEST.MF文件，该文件详细记录了apk包中所有文件的哈希值，因此可以读取该文件获取到classes.dex文件对应的哈希值，将该值与软件发布时的classes.dex哈希值做比较就可以判断客户端是否被篡改。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为了防止被破解，软件发布时的classes.dex哈希值应该存放在服务器端。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;private boolean checkcrc(){
    boolean checkResult = false;
    long crc = Long.parseLong(getString(R.string.crc));//获取字符资源中预埋的crc值
    ZipFile zf;
    try{
        String path = getApplicationContext().getPackageCodePath();//获取apk安装路径
        zf = new ZipFile(path);//将apk封装成zip对象
        ZipEntry ze = zf.getEntry(&quot;classes.dex&quot;);//获取apk中的classes.dex
        long CurrentCRC = ze.getCrc();//计算当前应用classes.dex的crc值
        if(CurrentCRC != crc){//crc值对比
            checkResult = true;
        }
    }catch(IOException e){
        handleError();
        checkResult = false;
    }
    return checkResult;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外由于逆向c/c++代码要比逆向Java代码困难很多，所以关键代码部位应该使用Native C/C++来编写。&lt;/p&gt;

&lt;h1 id=&quot;so&quot;&gt;SO保护&lt;/h1&gt;

&lt;p&gt;Android so通过C/C++代码来实现，相对于Java代码来说其反编译难度要大很多，但对于经验丰富的破解者来说，仍然是很容易的事。应用的关键性功能或算法，都会在so中实现，如果so被逆向，应用的关键性代码和算法都将会暴露。对于so的保护，可以才有编译器优化技术、剥离二进制文件等方式，还可以使用开源的so加固壳upx进行加固。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;编译器优化技术&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了隐藏核心的算法或者其它复杂的逻辑，使用编译优化技术可以帮助混淆目标代码，使它不会很容易的被攻击者反编译，从而让攻击者对特定代码的理解变得更加困难。如使用LLVM混淆。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;剥离二进制文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;剥离本地二进制文件是一种有效的方式，使攻击者需要更多的时间和更高的技能水平来查看你的应用程序底层功能的实现。剥离二进制文件，就是将二进制文件的符号表删除，使攻击者无法轻易调试或逆向应用。在Android上可以使用GNU/Linux系统上已经使用过的技术，如sstriping或者UPX。&lt;/p&gt;

&lt;p&gt;UPX对文件进行加壳时会把软件版本等相关信息写入壳内，攻击者可以通过静态反汇编可查看到这些壳信息，进而寻找对应的脱壳机进行脱壳，使得攻击难度降低。所以我们必须在UPX源码中删除这些信息，重新编译后再进行加壳，步骤如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用原始版本对文件进行加壳。&lt;/li&gt;
  &lt;li&gt;使用IDA反汇编加壳文件，在反汇编文件的上下文中查找UPX壳特征字符串。&lt;/li&gt;
  &lt;li&gt;在UPX源码中查找这些特征字符串，并一一删除。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nowsecure.com/resources/secure-mobile-development/coding-practices/code-complexity-and-obfuscation/&quot;&gt;https://www.nowsecure.com/resources/secure-mobile-development/coding-practices/code-complexity-and-obfuscation/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;资源文件保护&lt;/h1&gt;

&lt;p&gt;如果资源文件没有保护，则会使应用存在两方面的安全风险：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;通过资源定位代码，方便应用破解 反编译apk获得源码，通过资源文件或者关键字符串的ID定位到关键代码位置，为逆向破解应用程序提供方便.&lt;/li&gt;
  &lt;li&gt;替换资源文件，盗版应用 “if you can see something, you can copy it”。Android应用程序中的资源，比如图片和音频文件，容易被复制和窃取。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;可以考虑将其作为一个二进制形式进行加密存储，然后加载，解密成字节流并把它传递到BitmapFactory。当然，这会增加代码的复杂度，并且造成轻微的性能影响。&lt;/p&gt;

&lt;p&gt;不过资源文件是全局可读的，即使不打包在apk中，而是在首次运行时下载或者需要使用时下载，不在设备中保存，但是通过网络数据包嗅探还是很容易获取到资源url地址。&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;反调试技术&lt;/h1&gt;

&lt;h2 id=&quot;section-5&quot;&gt;限制调试器连接&lt;/h2&gt;

&lt;p&gt;应用程序可以通过使用特定的系统API来防止调试器附加到该进程。通过阻止调试器连接，攻击者干扰底层运行时的能力是有限的。攻击者为了从底层攻击应用程序必须首先绕过调试限制。这进一步增加了攻击复杂性。Android应用程序应该在manifest中设置&lt;code class=&quot;highlighter-rouge&quot;&gt;Android:debuggable=“false”&lt;/code&gt;，这样就不会很容易在运行时被攻击者或者恶意软件操纵。&lt;/p&gt;

&lt;h2 id=&quot;trace&quot;&gt;Trace检查&lt;/h2&gt;

&lt;p&gt;应用程序可以检测自己是否正在被调试器或其他调试工具跟踪。如果被追踪，应用程序可以执行任意数量的可能攻击响应行为，如丢弃加密密钥来保护用户数据，通知服务器管理员，或者其它类型自我保护的响应。这可以由检查进程状态标志或者使用其它技术，如比较ptrace附加的返回值，检查父进程，黑名单调试器进程列表或通过计算运行时间的差异来反调试。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/obfuscator-llvm/obfuscator/wiki&quot;&gt;https://github.com/obfuscator-llvm/obfuscator/wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nowsecure.com/resources/secure-mobile-development/coding-practices/code-complexity-and-obfuscation/&quot;&gt;https://www.nowsecure.com/resources/secure-mobile-development/coding-practices/code-complexity-and-obfuscation/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;a. 父进程检测
通常，我们在使用gdb调试时，是通过gdb 这种方式进行的。而这种方式是启动gdb，fork出子进程后执行目标二进制文件。因此，二进制文件的父进程即为调试器。我们可通过检查父进程名称来判断是否是由调试器fork。示例代码如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
  
int main(int argc, char *argv[]) {
   char buf0[32], buf1[128];
   FILE* fin;
  
   snprintf(buf0, 24, &quot;/proc/%d/cmdline&quot;, getppid());
   fin = fopen(buf0, &quot;r&quot;);
   fgets(buf1, 128, fin);
   fclose(fin);
  
   if(!strcmp(buf1, &quot;gdb&quot;)) {
       printf(&quot;Debugger detected&quot;);
       return 1;
   }  
   printf(&quot;All good&quot;);
   return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里我们通过getppid获得父进程的PID，之后由/proc文件系统获取父进程的命令内容，并通过比较字符串检查父进程是否为gdb。实际运行结果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/2016012010510132870120.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b.当前运行进程检测&lt;/p&gt;

&lt;p&gt;例如对android_server进程检测。针对这种检测只需将android_server改名就可绕过&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pid_t GetPidByName(const charchar *as_name) {  
        DIR *pdir = NULL;  
        struct dirent *pde = NULL;  
        FILEFILE *pf = NULL;  
        char buff[128];  
        pid_t pid;  
        char szName[128];  
        // 遍历/proc目录下所有pid目录    
        pdir = opendir(&quot;/proc&quot;);  
        if (!pdir) {  
                perror(&quot;open /proc fail.\n&quot;);  
                return -1;  
        }  
        while ((pde = readdir(pdir))) {  
                if ((pde-&amp;gt;d_name[0] &amp;lt; &#39;0&#39;) || (pde-&amp;gt;d_name[0] &amp;gt; &#39;9&#39;)) {  
                        continue;  
                }  
                sprintf(buff, &quot;/proc/%s/status&quot;, pde-&amp;gt;d_name);  
                pf = fopen(buff, &quot;r&quot;);  
                if (pf) {  
                        fgets(buff, sizeof(buff), pf);  
                        fclose(pf);  
                        sscanf(buff, &quot;%*s %s&quot;, szName);  
                        pid = atoi(pde-&amp;gt;d_name);  
                        if (strcmp(szName, as_name) == 0) {  
                                closedir(pdir);  
                                return pid;  
                        }  
                }  
        }  
        closedir(pdir);  
        return 0;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;c.读取进程状态(/proc/pid/status)&lt;/p&gt;

&lt;p&gt;State属性值T 表示调试状态，TracerPid 属性值正在调试此进程的pid,在非调试情况下State为S或R, TracerPid等于0&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/2016012010510380203218.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由此，我们便可通过检查status文件中TracerPid的值来判断是否有正在被调试。示例代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
int main(int argc, char *argv[]) {
   int i;
   scanf(&quot;%d&quot;, &amp;amp;i);
   char buf1[512];
   FILE* fin;
   fin = fopen(&quot;/proc/self/status&quot;, &quot;r&quot;);
   int tpid;
   const char *needle = &quot;TracerPid:&quot;;
   size_t nl = strlen(needle);
   while(fgets(buf1, 512, fin)) {
       if(!strncmp(buf1, needle, nl)) {
           sscanf(buf1, &quot;TracerPid: %d&quot;, &amp;amp;tpid);
           if(tpid != 0) {
                printf(&quot;Debuggerdetected&quot;);
                return 1;
           }
       }
    }
   fclose(fin);
   printf(&quot;All good&quot;);
   return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;实际运行结果如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/2016012010510789920310.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;值得注意的是，/proc目录下包含了进程的大量信息。我们在这里是读取status文件，此外，也可通过/proc/self/stat文件来获得进程相关信息，包括运行状态。&lt;/p&gt;

&lt;p&gt;d.读取&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/%d/wchan&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;下图中第一个红色框值为非调试状态值，第二个红色框值为调试状态：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/201601201051123415847.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static int getWchanStatus(int pid)  
{  
      FILEFILE *fp= NULL;  
      char filename;  
      char wchaninfo = {0};  
      int result = WCHAN_ELSE;  
      char cmd = {0};  
      sprintf(cmd,&quot;cat /proc/%d/wchan&quot;,pid);  
      LOGANTI(&quot;cmd= %s&quot;,cmd);  
      FILEFILE *ptr;         
      if((ptr=popen(cmd, &quot;r&quot;)) != NULL)  
      {  
                if(fgets(wchaninfo, 128, ptr) != NULL)  
                {  
                        LOGANTI(&quot;wchaninfo= %s&quot;,wchaninfo);  
                }  
      }  
      if(strncasecmp(wchaninfo,&quot;sys_epoll\0&quot;,strlen(&quot;sys_epoll\0&quot;)) == 0)  
                result = WCHAN_RUNNING;  
      else if(strncasecmp(wchaninfo,&quot;ptrace_stop\0&quot;,strlen(&quot;ptrace_stop\0&quot;)) == 0)  
                result = WCHAN_TRACING;  
      return result;  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;e.ptrace 自身或者fork子进程相互ptrace&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (ptrace(PTRACE_TRACEME, 0, 1, 0) &amp;lt; 0) {  
printf(&quot;DEBUGGING... Bye\n&quot;);  
return 1;  
}  
void anti_ptrace(void)  
{  
    pid_t child;  
    child = fork();  
    if (child)  
      wait(NULL);  
    else {  
      pid_t parent = getppid();  
      if (ptrace(PTRACE_ATTACH, parent, 0, 0) &amp;lt; 0)  
            while(1);  
      sleep(1);  
      ptrace(PTRACE_DETACH, parent, 0, 0);  
      exit(0);  
    }  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;f.设置程序运行最大时间&lt;/p&gt;

&lt;p&gt;这种方法经常在CTF比赛中看到。由于程序在调试时的断点、检查修改内存等操作，运行时间往往要远大于正常运行时间。所以，一旦程序运行时间过长，便可能是由于正在被调试。&lt;/p&gt;

&lt;p&gt;具体地，在程序启动时，通过alarm设置定时，到达时则中止程序。示例代码如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;signal.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
void alarmHandler(int sig) {
   printf(&quot;Debugger detected&quot;);
   exit(1);
}
void__attribute__((constructor))setupSig(void) {
   signal(SIGALRM, alarmHandler);
   alarm(2);
}
int main(int argc, char *argv[]) {
   printf(&quot;All good&quot;);
   return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在此例中，我们通过&lt;code class=&quot;highlighter-rouge&quot;&gt;__attribute__((constructor))&lt;/code&gt;，在程序启动时便设置好定时。实际运行中，当我们使用gdb在main函数下断点，稍候片刻后继续执行时，则触发了SIGALRM，进而检测到调试器。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/201601201051141430658.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;顺便一提，这种方式可以轻易地被绕过。我们可以设置gdb对signal的处理方式，如果我们选择将SIGALRM忽略而非传递给程序，则alarmHandler便不会被执行，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/201601201051165775369.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;g.检查进程打开的filedescriptor&lt;/p&gt;

&lt;p&gt;如2.2中所说，如果被调试的进程是通过gdb 的方式启动，那么它便是由gdb进程fork得到的。而fork在调用时，父进程所拥有的fd(file descriptor)会被子进程继承。由于gdb在往往会打开多个fd，因此如果进程拥有的fd较多，则可能是继承自gdb的，即进程在被调试。&lt;/p&gt;

&lt;p&gt;具体地，进程拥有的fd会在/proc/self/fd/下列出。于是我们的示例代码如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;dirent.h&amp;gt;
int main(int argc, char *argv[]) {
   struct dirent *dir;
   DIR *d = opendir(&quot;/proc/self/fd&quot;);
   while(dir=readdir(d)) {
       if(!strcmp(dir-&amp;gt;d_name, &quot;5&quot;)) {
           printf(&quot;Debugger detected&quot;);
           return 1;
       }
    }
   closedir(d);
   printf(&quot;All good&quot;);
   return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里，我们检查/proc/self/fd/中是否包含fd为5。由于fd从0开始编号，所以fd为5则说明已经打开了6个文件。如果程序正常运行则不会打开这么多，所以由此来判断是否被调试。运行结果见下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/201601201051182323977.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;h.防止dump&lt;/p&gt;

&lt;p&gt;利用Inotify机制，对/proc/pid/mem和/proc/pid/pagemap文件进行监视。inotify API提供了监视文件系统的事件机制，可用于监视个体文件，或者监控目录。具体原理可参考：&lt;a href=&quot;http://man7.org/linux/man-pages/man7/inotify.7.html&quot;&gt;http://man7.org/linux/man-pages/man7/inotify.7.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;伪代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void __fastcall anitInotify(int flag)  
{  
      MemorPagemap = flag;  
      charchar *pagemap = &quot;/proc/%d/pagemap&quot;;  
      charchar *mem = &quot;/proc/%d/mem&quot;;  
      pagemap_addr = (charchar *)malloc(0x100u);  
      mem_addr = (charchar *)malloc(0x100u);  
      ret = sprintf(pagemap_addr, &amp;amp;pagemap, pid_);  
      ret = sprintf(mem_addr, &amp;amp;mem, pid_);  
      if ( !MemorPagemap )  
      {  
                ret = pthread_create(&amp;amp;th, 0, (voidvoid *(*)(voidvoid *)) inotity_func, mem_addr);  
                if ( ret &amp;gt;= 0 )  
                   ret = pthread_detach(th);  
      }  
      if ( MemorPagemap == 1 )  
      {  
                ret = pthread_create(&amp;amp;newthread, 0, (voidvoid *(*)(voidvoid *)) inotity_func, pagemap_addr);  
                if(ret &amp;gt; 0)  
                  ret = pthread_detach(th);  
      }  
}  
void __fastcall __noreturn inotity_func(const charchar *inotity_file)  
{  
      const charchar *name; // r4@1  
      signed int fd; // r8@1  
      bool flag; // zf@3  
      bool ret; // nf@3  
      ssize_t length; // r10@3  
      ssize_t i; // r9@7  
      fd_set readfds; // @2  
      char event; // @1  
      name = inotity_file;  
      memset(buffer, 0, 0x400u);  
      fd = inotify_init();  
      inotify_add_watch(fd, name, 0xFFFu);  
      while ( 1 )  
      {  
                do  
                {  
                        memset(&amp;amp;readfds, 0, 0x80u);  
                }  
                while ( select(fd + 1, &amp;amp;readfds, 0, 0, 0) &amp;lt;= 0 );  
                length = read(fd, event, 0x400u);  
                flag = length == 0;  
                ret = length &amp;lt; 0;  
                if ( length &amp;gt;= 0 )  
                {  
                        if ( !ret &amp;amp;&amp;amp; !flag )  
                      {  
                              i = 0;  
                              do  
                              {  
                                        inotity_kill((int)&amp;amp;event);  
                                        i += *(_DWORD *)&amp;amp;event + 16;  
                              }  
                              while ( length &amp;gt; i );  
                        }  
                }  
                else  
                {  
                        while ( *(_DWORD *)_errno() == 4 )  
                        {  
                              length = read(fd, buffer, 0x400u);  
                              flag = length == 0;  
                              ret = length &amp;lt; 0;  
                              if ( length &amp;gt;= 0 )  
                        }  
                }  
      }  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;i.对read做hook&lt;/p&gt;

&lt;p&gt;因为一般的内存dump都会调用到read函数，所以对read做内存hook，检测read数据是否在自己需要保护的空间来阻止dump&lt;/p&gt;

&lt;p&gt;j.设置单步调试陷阱&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int handler()  
{  
    return bsd_signal(5, 0);  
}  
int set_SIGTRAP()  
{  
    int result;  
    bsd_signal(5, (int)handler);  
    result = raise(5);  
    return result;  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://www.freebuf.com/tools/83509.html&quot;&gt;http://www.freebuf.com/tools/83509.html&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;section-6&quot;&gt;应用加固技术&lt;/h1&gt;

&lt;p&gt;移动应用加固技术从产生到现在，一共经历了三代：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;第一代是基于类加载器的方式实现保护；&lt;/li&gt;
  &lt;li&gt;第二代是基于方法替换的方式实现保护；&lt;/li&gt;
  &lt;li&gt;第三代是基于虚拟机指令集的方式实现保护。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-7&quot;&gt;第一代加固技术：类加载器&lt;/h2&gt;

&lt;p&gt;以梆梆加固为例，类加载器主要做了如下工作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;classes.dex被完整加密，放到APK的资源中&lt;/li&gt;
  &lt;li&gt;采用动态劫持虚拟机的类载入引擎的技术&lt;/li&gt;
  &lt;li&gt;虚拟机能够载入并运行加密的classes.dex&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用一代加固技术以后的apk加载流程发生了变化如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/201601201051212999186.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;应用启动以后，会首先启动保护代码，保护代码会启动反调试、完整性检测等机制，之后再加载真实的代码。&lt;/p&gt;

&lt;p&gt;一代加固技术的优势在于：可以完整的保护APK，支持反调试、完整性校验等。&lt;/p&gt;

&lt;p&gt;一代加固技术的缺点是加固前的classes.dex文件会被完整的导入到内存中，可以用内存dump工具直接导出未加固的classes.dex文件。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;第二代加固技术：类方法替换&lt;/h2&gt;

&lt;p&gt;第二代加固技术采用了类方法替换的技术：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将原APK中的所有方法的代码提取出来，单独加密&lt;/li&gt;
  &lt;li&gt;运行时动态劫持Dalvik虚拟机中解析方法的代码，将解密后的代码交给虚拟机执行引擎&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;采用本技术的优势为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每个方法单独解密，内存中无完整的解密代码&lt;/li&gt;
  &lt;li&gt;如果某个方法没有执行，不会解密&lt;/li&gt;
  &lt;li&gt;在内存中dump代码的成本代价很高&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用二代加固技术以后，启动流程增加了一个解析函数代码的过程，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.wooyun.org//drops/20160120/201601201051231768397.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;第三代加固技术：虚拟机指令集&lt;/h2&gt;

&lt;p&gt;第三代加固技术是基于虚拟机执行引擎替换方式，所做主要工作如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将原APK中的所有的代码采用一种自定义的指令格式进行替换&lt;/li&gt;
  &lt;li&gt;运行时动态劫持Dalvik虚拟机中执行引擎，使用自定义执行引擎执行自定义的代码&lt;/li&gt;
  &lt;li&gt;类似于PC上的VMProtect采用的技术&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;三代技术的优点如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;具有2.0的所有优点&lt;/li&gt;
  &lt;li&gt;破解需要破解自定义的指令格式，复杂度非常高&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 27 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/2016/03/27/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/</link>
        <guid isPermaLink="true">http://blog.52dev.net/2016/03/27/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E4%B9%8B%E6%BA%90%E7%A0%81%E5%AE%89%E5%85%A8/</guid>
        
        
      </item>
    
      <item>
        <title>nginx反向代理</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;网站部署&lt;/h2&gt;
&lt;p&gt;IIS网站绑定端口801，Tomcat绑定端口8080，将nginx目录下的nginx.conf文件修改内容如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#user  nobody;
worker_processes  1;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#pid        logs/nginx.pid;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    #access_log  logs/access.log  main;
    sendfile        on;
    #tcp_nopush     on;
    keepalive_timeout  65;
    #gzip  on;
    server {
        listen       80;
        # 绑定域名
        server_name  www.guolingfa.cn;
        location / {
        	# 目标地址
       		proxy_pass   http://localhost:801;
        }
    }
	server {
        listen       80;
        server_name  guolingfa.cn;
        location / {
       		proxy_pass   http://localhost:801;
        }
    }
	server {
        listen       80;
        server_name  test.guolingfa.cn;
        location / {
       		proxy_pass   http://localhost:8080;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;nginx&quot;&gt;启动nginx&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 启动nginx 
start nginx
# 停止nginx
nginx -s stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 25 Mar 2016 00:00:00 +0800</pubDate>
        <link>http://blog.52dev.net/blog/2016/03/25/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link>
        <guid isPermaLink="true">http://blog.52dev.net/blog/2016/03/25/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid>
        
        <category>nginx</category>
        
        <category>tomcat</category>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
